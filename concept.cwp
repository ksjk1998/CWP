h1:"header";
h1{
// this is an idea for how to add content to cwp
"header";
"footer";
}

// perhaps the content doesn't have to be text, maybe it can be other forms of media
url(x.png) /* or */ file(x.png);
url(x.mp3) /* or */ file(x.mp3);
url(x.mp4) /* or */ file(x.mp4);
url(x.svg) /* or */ file(x.svg);

// links? that's ezpz
"my link" url(x) /* or */ file(x);

// but what about UI? How about we introduce UI as a datatype?
"default value" UI(textbox);

// other ideas for rulesets
h1#id:x; // sets id of content to draw to 'id'
h1.class:x // sets id of content to draw to 'id'

// how about individual styles for individual peices of conent?

"my embedded style text" {
 rules:parameters;
}

// being able to define all rulesets globally would have the added benefit of cascading these rulesets to all of these web pages
// but how about this?

website.cwp
[contents]
...
index {...}
aboutme {...}

// if we were to add links referring to other rulesets in other files then the links would possibly look like this

file("index.cwp");

// it parses that document and adds it to the page being loaded

file("index.cwp{page(element#id.class}}")

// from that file, only parses that container tree


// that is so far exactly what I can think of in terms of converting html structures into cwp structures

// another thing to consider is that if an elements rules get overwritten by another element with the exact same name

element {
 rule1: yes;
 rule2: no;
}
element {
 rule2: no;
}
// then the elemnt will not be completly overwritten, but cascaded
// rule1: yes;
// rule2: no;

// on the subject of a possible scripting language I have an idea to specifiy the value as an element

$value {...}

// what about a function that has no return value? how about this
$ {...}

// the scripting language can be placed anywhere, but where it's placed will change weather or not it gets loaded into what element
$1 {...}
index {
$2 {...}
// will load $1 and $2
}
aboutme {
$3 {...}
// will load $1 and $3
}
// functions can also be called within functions
$1 {
 $2 {
 }
}
// functions can include parameters
$1($2, $3) {

}
// functions can refer to values anywhere it cascades from
$1 {...}
index {
 $2 {
 $value = $1;
 }
}
aboutme {
 $3 {
 $value = $1;
 }
}
// one exeption to this rule is server side code which must not be shared to the client for security reasons. make the value private
$1 {...}
private $safe {}
index {
 $2 {
 $value = $1;
 }
}
aboutme {
 $3 {
 $value = $1;
 }
}
// private functions act perfectly normal on the server side, on the client side however, these functions do not get sent under any circumstances
// if you wish send the output of these private functions over to the client side, you must store them outside a private function

// we've initalized a function, so how do you set one? here's how
$1 {
 1;
}
// $1 now equals 1. you can do this for any datatype
$1 {
 break;
 1;
}
// $1 equals NULL because you forced the function to stop before it set it to 1
$1 {
 "string";
}
// strings which is an array of a char $1[0] equals 's'
$1 {
 10 1 2 3 4 5 6;
}
// arrays: $1[0] equals 10
$1 {
 1.00;
}
// floats

// in the near future we plan to add loops, conditionals and all sorts of basic stuff
// in the farther, but still close future, we will give this scripting language the abillity to add rulesets to wherever the function is located at
// we also plan to add the abillity to import libraries with the CWP file that can explore functionallity outside the confines of the file it inhabiats
 // this would allow you to modifiy databases, use machine learning algorithims and basically whatever else you want to use for your website
